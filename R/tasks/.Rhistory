getwd()
rm(list=ls())
irisData <- read.csv(file="C:/Users/Ismael/Desktop/OSTRAVA UNI/MAD1/R/iris.csv", sep = ";")
rm(list=ls())
a <- 1:10   # integers from 1 to 10 (vector)
b <- letters[1:5]  # vector of characters (object letters is built-in vector of 26 characters of English alphabet)
save(a, b, file="./mydatafile.Rdata")
rm(a, b)  # remove (delete)
load("./mydatafile.Rdata")
print(a)  # or simply type a
print(b)
var1 <- sample(5)  # integers from 1 to 5 insome random permutation
# ------- 2. example ---------------------------
rm(list = ls())
var1 <- sample(5)  # integers from 1 to 5 insome random permutation
var2 <- var1 / 10
var3 <- c("R", "and", "Data Mining", "Examples", "Case Studies")
df1 <- data.frame(var1, var2, var3)  # to create data frame
names(df1) <- c("Var.Int", "Var.Num", "Var.Char")  # to set columns' name (attributes' names)
write.csv(df1, "./mydatafile3.csv", row.names = FALSE)
df2 <- read.csv("./mydatafile3.csv")
print(df2)
df2$Var.Int # to print valuesof Var.Int atribute
# ------- 2. example ---------------------------
rm(list = ls())
df<-as.data.frame(read.csv("./weather_nominal.csv", header = T, sep = ";")) # to read csv file,
df<-as.data.frame(read.csv("./weather_nominal.csv", header = T, sep = ";")) # to read csv file,
# it is possible to set the separator and to decide if the names of attributes are to be read
names(df) # attributes' names (columns' names)
df$Outlook # values of Outlook attribute
df$Temperature
df$Humidity
df$Windy
df$Play
dim(df) # dimension of data frame
str(df) # structure of data frame
attributes(df) # attributes
head(df, 5) # first 5 rows of data frames
tail(df, 2) # last tvo rows of data frames
summary(df) # returns the frequency of all values of the given attribute (for numeric even median, mean, ....)
t<-table(df$Outlook) # to create tabular results of categorical variables
t
barplot(t)
pie(t)
rm(list=ls())
install.packages(c("fitdistrplus", "lsa"))
df<-read.csv("./iris.csv", header = T, sep = ";", dec = ",", stringsAsFactors=F)
df<-read.csv("../iris.csv", header = T, sep = ";", dec = ",", stringsAsFactors=F)
# but, Species will be a categorial variable for us
df$Species <-factor(df$Species)
str(df)
# table of frequencies
table(df$Species)
df<-read.csv("../iris.csv", header = T, sep = ";", dec = ",", stringsAsFactors=F)
str(df)
# table of frequencies
table(df$Species)
# table of frequencies
table(df$Species)
df<-read.csv("../iris.csv", header = T, sep = ";", dec = ",")
str(df)
# table of frequencies
table(df$Species)
df<-read.csv("../iris.csv", header = T, sep = ";", dec = ",", stringsAsFactors=F)
# table of frequencies
table(df$Species)
#  table of relative frequencies
table(df$Species)/length(df$Species)
table(df$variety)
df<-read.csv("../iris.csv", header = T, sep = ";", dec = ",", stringsAsFactors=F)
# but, variety will be a categorial variable for us
df$variety <-factor(df$variety)
str(df)
# table of frequencies
table(df$variety)
#  table of relative frequencies
table(df$variety)/length(df$variety)
pie(table(df$variety))
barplot(table(df$variety))
# mean
mean(df$Sepal.Length)
df<-read.csv("../iris.csv", header = T, sep = ";", dec = ".", stringsAsFactors=F)
# but, variety will be a categorial variable for us
df$variety <-factor(df$variety)
# table of frequencies
table(df$variety)
#  table of relative frequencies
table(df$variety)/length(df$variety)
pie(table(df$variety))
barplot(table(df$variety))
# mean
mean(df$Sepal.Length)
# mean
mean(df$sepal_length)
# total variance
var(df$sepal_length)
# standard deviation
sd(df$sepal_length)
# median
median(df$sepal_length)
range(df$sepal_length)
min(df$sepal_length)
max(df$sepal_length)
# table of frequencies
table(df$sepal_length)
#  table  of rel. frequencies
table(df$sepal_length)/length(df$sepal_length)
# histogram, takes it as a continuous variable
hist(df$sepal_length)
plot(density(df$sepal_length))  # probability density function
# I'd like to join it in one plot
hist(df$sepal_length, freq=F, col="grey")
plot(density(df$sepal_length))  # probability density function
# I'd like to join it in one plot
hist(df$sepal_length, freq=F, col="grey")
lines(density(df$sepal_length), col="blue", lwd=2)
# finer binning (finer division of the x-axis interval)
hist(df$sepal_length, breaks = (max(df$sepal_length)-min(df$sepal_length))*5, probability = T, col="grey")
lines(density(df$sepal_length), col="blue", lwd=2)
# add normal distribution
curve(dnorm(x, mean=mean(df$sepal_length),sd=sd(df$sepal_length)), min(df$sepal_length), max(df$sepal_length), add=T, col="green")
## Install if missing
if (!require("fitdistrplus"))
install.packages("fitdistrplus")
library(fitdistrplus)
# # empirical cumulative distribution function
plot(ecdf(df$sepal_length))
# using the plotdist() function from the fitdistrplus package
plotdist(df$sepal_length, histo = TRUE, demp = TRUE)
# can the sepal_length frequency be used as a discrete variable?
# use table()
fsl<-table(df$sepal_length)
# reltive frequency
prop.table(fsl)
plot(as.numeric(names(fsl)),as.numeric(fsl),xlab="hodnota", ylab="cetnost", main='hist sepal_length')
# the histogram or column chart is better
plot(fsl)
# or
barplot(fsl)
#  pmf, probabiltiy mass function
plot(prop.table(fsl))
#-----------------------------------------------------------------------------------------------
# we will make a matrix from the first two columns
# function cbind()
dm<-cbind(df$sepal_length,df$Sepal.Width)
# or dm <-dist(df[,c("sepal_length","Sepal.Width")]
dm
# Euclidean distance
dist(dm)
# we do not see much :-), so we will only count it for the first few instances
dm2<-head(dm)
dm2
dist(dm2)
min(dist(dm2))
max(dist(dm2))
# cosine measure (similarity)
## Install if missing
if (!require("lsa"))
install.packages("lsa")
library(lsa)
dm2 <- t(dm2) # transposed matrix, Why? test the cosine () function on an untransposed matrix
dm2
cosine(dm2)
min(cosine(dm2))
max(cosine(dm2))
